
library(r4ss)
library(reshape2)
library(readxl)

mod_path <- "anch-ss3"
data_path <- "anch.xlsx"

# parse_levels from gadget3
parse_levels <- function (lvls, var_name) {
    m <- suppressWarnings(as.numeric(lvls))
    if (!anyNA(m)) return(data.frame(
        names = lvls,
        lower_incl = TRUE,
        lower_bound = m,
        upper_bound = c(tail(m, -1), Inf),  # NB: No data about final bound, assume open-ended
        upper_incl = FALSE,
        open_ended_upper = TRUE,
        stringsAsFactors = FALSE))

    m <- regmatches(lvls, regexec("^(\\[|\\()(.*),(.*)(\\]|\\))", lvls))
    if (all(vapply(m, length, numeric(1)) == 5)) return(data.frame(
        names = lvls,
        lower_incl = vapply(m, function (mm) identical(mm[[2]], '['), logical(1)),
        lower_bound = vapply(m, function (mm) as.numeric(mm[[3]]), numeric(1)),
        upper_bound = vapply(m, function (mm) as.numeric(mm[[4]]), numeric(1)),
        upper_incl = vapply(m, function (mm) identical(mm[[5]], ']'), logical(1)),
        open_ended_upper = is.infinite(as.numeric(tail(m, 1)[[1]][[4]])),
        stringsAsFactors = FALSE))

    stop("Unknown form of ", var_name, " levels, see ?cut for formatting: ", paste(lvls, collapse = ", "))
}

# Create new SS3 model based on "simple_3.30.13"
r4ss::copy_SS_inputs(
    dir.old = system.file(file.path("extdata", "simple_3.30.13"), package = "r4ss"),
    dir.new = mod_path,
    overwrite = TRUE)
inputs <- r4ss::SS_read(dir = mod_path)

inputs$dat$Comments <- sprintf("#C %s model generated by ModelWizard", mod_path)

# Clear tables
inputs$dat$fleetinfo <- inputs$dat$fleetinfo[c(),,drop = FALSE]
inputs$dat$catch <- inputs$dat$catch[c(),,drop = FALSE]
inputs$dat$CPUEinfo <- inputs$dat$CPUEinfo[c(),,drop = FALSE]
inputs$dat$CPUE <- inputs$dat$CPUE[c(),,drop = FALSE]
inputs$dat$len_info <- inputs$dat$len_info[c(),,drop = FALSE]
inputs$dat$lencomp <- inputs$dat$lencomp[c(),,drop = FALSE]
inputs$dat$age_info <- inputs$dat$age_info[c(),,drop = FALSE]
inputs$dat$agecomp <- inputs$dat$agecomp[c(),,drop = FALSE]
inputs$dat$MeanSize_at_Age_obs <- inputs$dat$MeanSize_at_Age_obs[c(),,drop = FALSE]


# Create area definitions ####################
inputs$dat$N_areas <- 1L


# Create time definitions ####################

inputs$dat$styr <- 1979L

inputs$dat$endyr <- 2023L
inputs$dat$nseas <- 4L
inputs$dat$months_per_seas <- 3L


# Create stock definition for anch ####################

inputs$dat$spawn_month <- 0 * inputs$dat$months_per_seas
inputs$dat$Nsexes <- 1
inputs$dat$Nages <- 4
inputs$dat$lbin_vector <- seq(3, 22, 0.5)
inputs$dat$agebin_vector <- seq(0, 3, 1)


# Create fleet definition for seine ####################
inputs$dat$fleetinfo <- rbind(inputs$dat$fleetinfo, data.frame(
    type = 1,  # Fleet with input catches
    surveytiming = -1 * inputs$dat$months_per_seas,
    area = 1,  # Assume one area
    units = 2,  # Numbers (thousands of fish)
    need_catch_mult = 0,
    fleetname = "seine",
    stringsAsFactors = FALSE))

inputs$dat$len_info["seine",] <- list(
    mintailcomp = 0,
    addtocomp = 1e-7,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 0.001)

inputs$dat$age_info["seine",] <- list(
    mintailcomp = 0,
    addtocomp = 1e-7,
    combine_M_F = 1,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 0.001)

inputs$dat$CPUEinfo["seine",] <- list(
    Fleet = "seine",  # NB: Use fleetnames for now, will renumber later
    Units = 0,
    Errtype = 0,
    SD_Report = 0)

# Equilibrium catch fields
inputs$dat$catch <- rbind(inputs$dat$catch, data.frame(
    year = -999,
    seas = seq_len(inputs$dat$nseas),
    fleet = "seine",  # NB: Use fleetnames for now, will renumber later
    catch = 0,
    catch_se = 0.01,
    stringsAsFactors = TRUE))

landings_seine <- readxl::read_excel(data_path, "landings_seine")

inputs$dat$catch <- rbind(inputs$dat$catch, data.frame(
    year = landings_seine$year,
    seas = landings_seine$step,
    fleet = "seine",  # NB: Use fleetnames for now, will renumber later
    catch = landings_seine[["number"]],
    catch_se = 0.01,
    stringsAsFactors = TRUE))


# Create fleet definition for ecocadiz ####################
inputs$dat$fleetinfo <- rbind(inputs$dat$fleetinfo, data.frame(
    type = 1,  # Fleet with input catches
    surveytiming = -1 * inputs$dat$months_per_seas,
    area = 1,  # Assume one area
    units = 1,  # Biomass (metric tons)
    need_catch_mult = 0,
    fleetname = "ecocadiz",
    stringsAsFactors = FALSE))

inputs$dat$len_info["ecocadiz",] <- list(
    mintailcomp = 0,
    addtocomp = 1e-7,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 0.001)

inputs$dat$age_info["ecocadiz",] <- list(
    mintailcomp = 0,
    addtocomp = 1e-7,
    combine_M_F = 1,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 0.001)

inputs$dat$CPUEinfo["ecocadiz",] <- list(
    Fleet = "ecocadiz",  # NB: Use fleetnames for now, will renumber later
    Units = 0,
    Errtype = 0,
    SD_Report = 0)

# Equilibrium catch fields
inputs$dat$catch <- rbind(inputs$dat$catch, data.frame(
    year = -999,
    seas = seq_len(inputs$dat$nseas),
    fleet = "ecocadiz",  # NB: Use fleetnames for now, will renumber later
    catch = 0,
    catch_se = 0.01,
    stringsAsFactors = TRUE))

landings_ecocadiz <- readxl::read_excel(data_path, "landings_ecocadiz")

inputs$dat$catch <- rbind(inputs$dat$catch, data.frame(
    year = landings_ecocadiz$year,
    seas = landings_ecocadiz$step,
    fleet = "ecocadiz",  # NB: Use fleetnames for now, will renumber later
    catch = landings_ecocadiz[["weight"]],
    catch_se = 0.01,
    stringsAsFactors = TRUE))


# Create fleet definition for pelago ####################
inputs$dat$fleetinfo <- rbind(inputs$dat$fleetinfo, data.frame(
    type = 1,  # Fleet with input catches
    surveytiming = 0 * inputs$dat$months_per_seas,
    area = 1,  # Assume one area
    units = 1,  # Biomass (metric tons)
    need_catch_mult = 0,
    fleetname = "pelago",
    stringsAsFactors = FALSE))

inputs$dat$len_info["pelago",] <- list(
    mintailcomp = 0,
    addtocomp = 1e-7,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 0.001)

inputs$dat$age_info["pelago",] <- list(
    mintailcomp = 0,
    addtocomp = 1e-7,
    combine_M_F = 1,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 0.001)

inputs$dat$CPUEinfo["pelago",] <- list(
    Fleet = "pelago",  # NB: Use fleetnames for now, will renumber later
    Units = 0,
    Errtype = 0,
    SD_Report = 0)

# Equilibrium catch fields
inputs$dat$catch <- rbind(inputs$dat$catch, data.frame(
    year = -999,
    seas = seq_len(inputs$dat$nseas),
    fleet = "pelago",  # NB: Use fleetnames for now, will renumber later
    catch = 0,
    catch_se = 0.01,
    stringsAsFactors = TRUE))

landings_pelago <- readxl::read_excel(data_path, "landings_pelago")

inputs$dat$catch <- rbind(inputs$dat$catch, data.frame(
    year = landings_pelago$year,
    seas = landings_pelago$step,
    fleet = "pelago",  # NB: Use fleetnames for now, will renumber later
    catch = landings_pelago[["weight"]],
    catch_se = 0.01,
    stringsAsFactors = TRUE))


# Create abundance index for si_ecocadiz ####################
inputs$dat$fleetinfo <- rbind(inputs$dat$fleetinfo, data.frame(
    type = 3,
    surveytiming = -1 * inputs$dat$months_per_seas,
    area = 1,  # Assume one area
    units = 2,  # Numbers (thousands of fish)
    need_catch_mult = 0,
    fleetname = "si_ecocadiz"))

inputs$dat$len_info["si_ecocadiz",] <- list(
    mintailcomp = 0,
    addtocomp = 1e-7,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 0.001)

inputs$dat$age_info["si_ecocadiz",] <- list(
    mintailcomp = 0,
    addtocomp = 1e-7,
    combine_M_F = 1,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 0.001)

inputs$dat$CPUEinfo["si_ecocadiz",] <- list(
    Fleet = "si_ecocadiz",  # NB: Use fleetnames for now, will renumber later
    Units = 0,  # Numbers (thousands of fish)
    Errtype = 0,
    SD_Report = 0)

dist_si_ecocadiz <- readxl::read_excel(data_path, "dist_si_ecocadiz")

inputs$dat$CPUE <- rbind(inputs$dat$CPUE, data.frame(
    year = dist_si_ecocadiz$year,
    seas = dist_si_ecocadiz$step,
    index = "si_ecocadiz",  # NB: Use fleetnames for now, will renumber later
    obs = dist_si_ecocadiz[["number"]],  # TODO: Do we need to scale if numbers?
    se_log = 0.3,
    stringsAsFactors = TRUE))


# Create abundance index for si_pelago ####################
inputs$dat$fleetinfo <- rbind(inputs$dat$fleetinfo, data.frame(
    type = 3,
    surveytiming = -1 * inputs$dat$months_per_seas,
    area = 1,  # Assume one area
    units = 2,  # Numbers (thousands of fish)
    need_catch_mult = 0,
    fleetname = "si_pelago"))

inputs$dat$len_info["si_pelago",] <- list(
    mintailcomp = 0,
    addtocomp = 1e-7,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 0.001)

inputs$dat$age_info["si_pelago",] <- list(
    mintailcomp = 0,
    addtocomp = 1e-7,
    combine_M_F = 1,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 0.001)

inputs$dat$CPUEinfo["si_pelago",] <- list(
    Fleet = "si_pelago",  # NB: Use fleetnames for now, will renumber later
    Units = 0,  # Numbers (thousands of fish)
    Errtype = 0,
    SD_Report = 0)

dist_si_pelago <- readxl::read_excel(data_path, "dist_si_pelago")

inputs$dat$CPUE <- rbind(inputs$dat$CPUE, data.frame(
    year = dist_si_pelago$year,
    seas = dist_si_pelago$step,
    index = "si_pelago",  # NB: Use fleetnames for now, will renumber later
    obs = dist_si_pelago[["number"]],  # TODO: Do we need to scale if numbers?
    se_log = 0.3,
    stringsAsFactors = TRUE))


# Create length distribution for seine ####################

ldist_seine <- readxl::read_excel(data_path, "ldist_seine")


if (nrow(inputs$dat$lencomp) == 0) {
    # Seed lencomp with columns based on lbin_vector
    cols <- paste0("L", inputs$dat$lbin_vector)
    cols <- structure(as.list(rep(0, length(cols))), names = cols)
    inputs$dat$lencomp <- as.data.frame(c(list(
        Yr = 1999,
        Seas = 1,
        FltSvy = "",
        Gender = 0,
        Part = 0,
        NSamp = 100), cols))[c(),]
}

# Convert lengths into SS-compatible names
ldist_seine$length <- as.factor(ldist_seine$length)
lvls <- parse_levels(levels(ldist_seine$length))
lvls_map <- structure(paste0("L", lvls$lower_bound), names = lvls$names)
levels(ldist_seine$length) <- lvls_map[levels(ldist_seine$length)]

# Rotate length groupings, renaming to SS labels
ldist_seine <- reshape2::dcast(
    ldist_seine,
    year + step + area ~ length,
    value.var = "number")

inputs$dat$lencomp <- dplyr::bind_rows(inputs$dat$lencomp, cbind(data.frame(
    Yr = ldist_seine$year,
    Seas = ldist_seine$step,
    FltSvy = "seine",  # NB: Use fleetnames for now, will renumber later
    Gender = 0,
    Part = 0,
    NSamp = 100,
    stringsAsFactors = TRUE), ldist_seine[,lvls_map]))


# Create length distribution for ecocadiz ####################

ldist_ecocadiz <- readxl::read_excel(data_path, "ldist_ecocadiz")


if (nrow(inputs$dat$lencomp) == 0) {
    # Seed lencomp with columns based on lbin_vector
    cols <- paste0("L", inputs$dat$lbin_vector)
    cols <- structure(as.list(rep(0, length(cols))), names = cols)
    inputs$dat$lencomp <- as.data.frame(c(list(
        Yr = 1999,
        Seas = 1,
        FltSvy = "",
        Gender = 0,
        Part = 0,
        NSamp = 100), cols))[c(),]
}

# Convert lengths into SS-compatible names
ldist_ecocadiz$length <- as.factor(ldist_ecocadiz$length)
lvls <- parse_levels(levels(ldist_ecocadiz$length))
lvls_map <- structure(paste0("L", lvls$lower_bound), names = lvls$names)
levels(ldist_ecocadiz$length) <- lvls_map[levels(ldist_ecocadiz$length)]

# Rotate length groupings, renaming to SS labels
ldist_ecocadiz <- reshape2::dcast(
    ldist_ecocadiz,
    year + step + area ~ length,
    value.var = "number")

inputs$dat$lencomp <- dplyr::bind_rows(inputs$dat$lencomp, cbind(data.frame(
    Yr = ldist_ecocadiz$year,
    Seas = ldist_ecocadiz$step,
    FltSvy = "ecocadiz",  # NB: Use fleetnames for now, will renumber later
    Gender = 0,
    Part = 0,
    NSamp = 100,
    stringsAsFactors = TRUE), ldist_ecocadiz[,lvls_map]))


# Create length distribution for pelago ####################

ldist_pelago <- readxl::read_excel(data_path, "ldist_pelago")


if (nrow(inputs$dat$lencomp) == 0) {
    # Seed lencomp with columns based on lbin_vector
    cols <- paste0("L", inputs$dat$lbin_vector)
    cols <- structure(as.list(rep(0, length(cols))), names = cols)
    inputs$dat$lencomp <- as.data.frame(c(list(
        Yr = 1999,
        Seas = 1,
        FltSvy = "",
        Gender = 0,
        Part = 0,
        NSamp = 100), cols))[c(),]
}

# Convert lengths into SS-compatible names
ldist_pelago$length <- as.factor(ldist_pelago$length)
lvls <- parse_levels(levels(ldist_pelago$length))
lvls_map <- structure(paste0("L", lvls$lower_bound), names = lvls$names)
levels(ldist_pelago$length) <- lvls_map[levels(ldist_pelago$length)]

# Rotate length groupings, renaming to SS labels
ldist_pelago <- reshape2::dcast(
    ldist_pelago,
    year + step + area ~ length,
    value.var = "number")

inputs$dat$lencomp <- dplyr::bind_rows(inputs$dat$lencomp, cbind(data.frame(
    Yr = ldist_pelago$year,
    Seas = ldist_pelago$step,
    FltSvy = "pelago",  # NB: Use fleetnames for now, will renumber later
    Gender = 0,
    Part = 0,
    NSamp = 100,
    stringsAsFactors = TRUE), ldist_pelago[,lvls_map]))




# Create age-length distribution for seine ####################
# TODO: Not supported yet


# Create age-length distribution for ecocadiz ####################
# TODO: Not supported yet


# Create age-length distribution for pelago ####################
# TODO: Not supported yet




# Finalise model #######################

# Convert names to numbered fleets
inputs$dat$catch$fleet <- as.numeric(factor(inputs$dat$catch$fleet, levels = inputs$dat$fleetinfo$fleetname))
inputs$dat$CPUEinfo$Fleet <- as.numeric(factor(inputs$dat$CPUEinfo$Fleet, levels = inputs$dat$fleetinfo$fleetname))
inputs$dat$CPUE$index <- as.numeric(factor(inputs$dat$CPUE$index, levels = inputs$dat$fleetinfo$fleetname))
inputs$dat$lencomp$FltSvy <- as.numeric(factor(inputs$dat$lencomp$FltSvy, levels = inputs$dat$fleetinfo$fleetname))

# Set rownames (so they can be added as comments into data.ss)
rownames(inputs$dat$fleetinfo) <- inputs$dat$fleetinfo$fleetname

# Zero NA values in catch
for (n in names(inputs$dat$lencomp)[-seq_len(6)]) {
    inputs$dat$lencomp[[n]][is.na(inputs$dat$lencomp[[n]])] <- 0
}

# Derived values
inputs$dat$Nfleets <- nrow(inputs$dat$fleetinfo)
inputs$dat$N_lbins <- length(inputs$dat$lbin_vector)
if (nrow(inputs$dat$lencomp) > 0) {
    inputs$dat$use_lencomp <- 1
} else {
    inputs$dat$use_lencomp <- 0
    inputs$dat$lencomp <- NULL  # r4ss wont write 0-row data.frames
}
inputs$dat$N_agebins <- length(inputs$dat$agebin_vector)
if (nrow(inputs$dat$MeanSize_at_Age_obs) > 0) {
    inputs$dat$use_MeanSize_at_Age_obs <- 1
} else {
    inputs$dat$use_MeanSize_at_Age_obs <- 0
    inputs$dat$MeanSize_at_Age_obs <- NULL  # r4ss wont write 0-row data.frames
}
inputs$dat$Ngenders <- inputs$dat$Nsexes

# Write back to mod_path
r4ss::SS_write(inputs, dir = mod_path, overwrite = TRUE)


