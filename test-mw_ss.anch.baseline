
library(r4ss)
library(reshape2)
library(readxl)
library(dplyr)

mod_path <- "anch-ss3"
data_path <- "anch.xlsx"

# parse_levels from gadget3
parse_levels <- function (lvls, var_name) {
    m <- suppressWarnings(as.numeric(lvls))
    if (!anyNA(m)) return(data.frame(
        names = lvls,
        lower_incl = TRUE,
        lower_bound = m,
        upper_bound = c(tail(m, -1), Inf),  # NB: No data about final bound, assume open-ended
        upper_incl = FALSE,
        open_ended_upper = TRUE,
        stringsAsFactors = FALSE))

    m <- regmatches(lvls, regexec("^(\\[|\\()(.*),(.*)(\\]|\\))", lvls))
    if (all(vapply(m, length, numeric(1)) == 5)) return(data.frame(
        names = lvls,
        lower_incl = vapply(m, function (mm) identical(mm[[2]], '['), logical(1)),
        lower_bound = vapply(m, function (mm) as.numeric(mm[[3]]), numeric(1)),
        upper_bound = vapply(m, function (mm) as.numeric(mm[[4]]), numeric(1)),
        upper_incl = vapply(m, function (mm) identical(mm[[5]], ']'), logical(1)),
        open_ended_upper = is.infinite(as.numeric(tail(m, 1)[[1]][[4]])),
        stringsAsFactors = FALSE))

    stop("Unknown form of ", var_name, " levels, see ?cut for formatting: ", paste(lvls, collapse = ", "))
}

# Create new SS3 model based on "simple_small"
r4ss::copy_SS_inputs(
    dir.old = system.file(file.path("extdata", "simple_small"), package = "r4ss"),
    dir.new = mod_path,
    overwrite = TRUE)
inputs <- r4ss::SS_read(dir = mod_path)

inputs$dat$Comments <- sprintf("#C %s model generated by ModelWizard", mod_path)

# Clear tables ####################
## data file ----
inputs$dat$fleetinfo <- inputs$dat$fleetinfo[c(),,drop = FALSE]
inputs$dat$catch     <- inputs$dat$catch[c(),,drop = FALSE]
inputs$dat$CPUEinfo  <- inputs$dat$CPUEinfo[c(),,drop = FALSE]
inputs$dat$CPUE      <- inputs$dat$CPUE[c(),,drop = FALSE]
inputs$dat$len_info  <- inputs$dat$len_info[c(),,drop = FALSE]
inputs$dat$lencomp   <- inputs$dat$lencomp[c(),,drop = FALSE]
inputs$dat$age_info  <- inputs$dat$age_info[c(),,drop = FALSE]
inputs$dat$agecomp   <- inputs$dat$agecomp[c(),,drop = FALSE]
inputs$dat$ageerror  <- inputs$dat$ageerror[c(),,drop = FALSE]
inputs$dat$MeanSize_at_Age_obs <- inputs$dat$MeanSize_at_Age_obs[c(),,drop = FALSE]
## control file ----
inputs$ctl$MG_parms         <- inputs$ctl$MG_parms[c(),,drop = FALSE]
inputs$ctl$SR_parms         <- inputs$ctl$SR_parms[c(),,drop = FALSE]
inputs$ctl$Q_options        <- inputs$ctl$Q_options[c(),,drop = FALSE]
inputs$ctl$Q_parms          <- inputs$ctl$Q_parms[c(),,drop = FALSE]
inputs$ctl$size_selex_types <- inputs$ctl$size_selex_types[c(),,drop = FALSE]
inputs$ctl$size_selex_parms <- inputs$ctl$size_selex_parms[c(),,drop = FALSE]
inputs$ctl$age_selex_types  <- inputs$ctl$age_selex_types[c(),,drop = FALSE]
inputs$ctl$age_selex_parms  <- inputs$ctl$age_selex_parms[c(),,drop = FALSE]
inputs$ctl$lambdas          <- inputs$ctl$lambdas[c(),,drop = FALSE]


# Create area definitions ####################
inputs$dat$N_areas <- 1L


# Create time definitions ####################

inputs$dat$styr <- 1979L

inputs$dat$endyr <- 2023L
inputs$dat$nseas <- 4L
inputs$dat$months_per_seas <- rep(12/inputs$dat$nseas, inputs$dat$nseas)


# Create stock definition for anch ####################

inputs$dat$spawn_month <- 1
inputs$dat$Nsexes <- 1
inputs$dat$Nages <- 3
inputs$dat$lbin_method  <-2 # option SS3
inputs$dat$binwidth     <- 0.5
inputs$dat$minimum_size <- 3
inputs$dat$maximum_size <- 22
inputs$dat$use_lencomp  <-1 # option SS3
inputs$dat$lbin_vector <- seq(3, 22, 0.5)
inputs$dat$agebin_vector <- seq(0, 3, 1)

# Growth
inputs$ctl$Growth_Age_for_L1<-0
inputs$ctl$Growth_Age_for_L2<-999
inputs$ctl$MG_parms["L_at_Amin", c("LO","HI","INIT","PHASE")]  <- c(0,10, 5,-3)
inputs$ctl$MG_parms["L_at_Amax", c("LO","HI","INIT","PHASE")]  <- c(5,22,19,-3)
inputs$ctl$MG_parms["VonBert_k", c("LO","HI","INIT","PHASE")]  <- c(0.1,2,0.89,-3)
inputs$ctl$MG_parms["CV_young", c("LO","HI","INIT","PHASE")]   <- c(0.05,0.25,0.1,-3)
inputs$ctl$MG_parms["CV_old", c("LO","HI","INIT","PHASE")]     <- c(0.05,0.25,0.1,-3)
inputs$ctl$MG_parms["Wtlen_1", c("LO","HI","INIT","PHASE")]    <- c(-3,3,0.00000313,-3) # kg
inputs$ctl$MG_parms["Wtlen_2", c("LO","HI","INIT","PHASE")]    <- c(-3,3,3.278,-3) # kg
inputs$ctl$MG_parms["Mat50%", c("LO","HI","INIT","PHASE")]     <- c(-3,15,22,-3)
inputs$ctl$MG_parms["Mat_slope", c("LO","HI","INIT","PHASE")]  <- c(-3,3,-0.45,-3)
inputs$ctl$MG_parms["Eggs_alpha", c("LO","HI","INIT","PHASE")] <- c(-3,3,1,-3)
inputs$ctl$MG_parms["Eggs_beta", c("LO","HI","INIT","PHASE")]  <- c(-3,3,0,-3)
inputs$ctl$MG_parms["CohortGrowDev", c("LO","HI","INIT","PHASE")] <- c(1,1,1,-3)
inputs$ctl$MG_parms["FracFemale", c("LO","HI","INIT","PHASE")]  <- c(0.0000001,0.9999999,0.5,-3)
inputs$ctl$MG_parms[is.na(inputs$ctl$MG_parms)]<-0

# Stock-recruitment (SR)
inputs$ctl$SR_function <- 4
inputs$ctl$SR_parms["SR_LN(R0)", c("LO","HI","INIT","PHASE")] <- c(5,10,9,1)
inputs$ctl$SR_parms["SR_SCAA_null", c("LO","HI","INIT","PHASE")] <- c(0.2,1,0.9,-4)
inputs$ctl$SR_parms["SR_sigmaR", c("LO","HI","INIT","PHASE")] <- c(0,2,0.6,-4)
inputs$ctl$SR_parms["SR_regime", c("LO","HI","INIT","PHASE")] <- c(-5,5,0,-4)
inputs$ctl$SR_parms["SR_autocorr", c("LO","HI","INIT","PHASE")] <- c(0,0,0,-4)
inputs$ctl$SR_parms[is.na(inputs$ctl$SR_parms)]<-0

# Natural Mortality
inputs$ctl$natM_type <- 3  # Age-varying
inputs$ctl$natM <- as.data.frame(sapply(
    paste("Age", inputs$dat$agebin_vector, sep = "_"),
    function (x) list(1.3) ))
rownames(inputs$ctl$natM) <- paste0("natM", seq_len(nrow(inputs$ctl$natM)))

# Recruitment deviation (recDev)
inputs$ctl$MainRdevYrFirst<-inputs$dat$styr
inputs$ctl$MainRdevYrLast<-inputs$dat$endyr
inputs$ctl$recdev_phase<-1
inputs$ctl$recdev_adv<-0


# Create commercial fleet seine ####################
inputs$dat$fleetinfo <- rbind(inputs$dat$fleetinfo, data.frame(
    type = 1,
    surveytiming = -1,
    area = 1,  # Assume one area
    units = 1,  # Biomass (metric tons)
    need_catch_mult = 0,
    fleetname = "seine",
    stringsAsFactors = FALSE))

inputs$dat$len_info["seine",] <- list(
    mintailcomp = -1,
    addtocomp = 1e-4,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 1)

inputs$dat$age_info["seine",] <- list(
    mintailcomp = -1,
    addtocomp = 1e-4,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 1)

inputs$dat$CPUEinfo["seine",] <- list(
    Fleet = which(inputs$dat$fleetinfo$fleetname == "seine"),
    Units = 1,
    Errtype = 0,
    SD_Report = 0)

# Equilibrium catch fields
if (nrow(inputs$dat$catch) == 0) inputs$dat$catch <- rbind(inputs$dat$catch, data.frame(
    year = -999,
    seas = seq_len(inputs$dat$nseas),
    fleet = which(inputs$dat$fleetinfo$fleetname == "seine"),
    catch = 0,
    catch_se = 0.1,
    stringsAsFactors = TRUE))

landings_seine <- readxl::read_excel(data_path, "landings_seine", na = c("", "NA"))

inputs$dat$catch <- rbind(inputs$dat$catch, data.frame(
    year = landings_seine$year,
    seas = landings_seine$step,
    fleet = which(inputs$dat$fleetinfo$fleetname == "seine"),
    catch = landings_seine[["weight"]],
    catch_se = 0.1,
    stringsAsFactors = TRUE))

inputs$ctl$Q_parms[paste0("LnQ_base_", "seine"),] <- list(
    LO = 0,
    HI = 5.5,
    INIT = 0.1,
    PHASE = 2 )

inputs$ctl$size_selex_types["seine", "Pattern"] <- 1
inputs$ctl$size_selex_types[is.na(inputs$ctl$size_selex_types)] <- 0

inputs$ctl$size_selex_parms[paste0("SizeSel_P_1_", "seine"),c("LO","HI","INIT","PHASE")] <- c(-1,10,8,3)
inputs$ctl$size_selex_parms[paste0("SizeSel_P_2_", "seine"),c("LO","HI","INIT","PHASE")] <- c(-1,20,10,3)
inputs$ctl$size_selex_parms[is.na(inputs$ctl$size_selex_parms)] <- 0

inputs$ctl$age_selex_types["seine", "Pattern"] <- 12
inputs$ctl$age_selex_types[is.na(inputs$ctl$age_selex_types)] <- 0

inputs$ctl$age_selex_parms[paste0("AgeSel_P_1_", "seine"),c("LO","HI","INIT","PHASE")] <- c(-2,5.5,0.1,-1)
inputs$ctl$age_selex_parms[paste0("AgeSel_P_2_", "seine"),c("LO","HI","INIT","PHASE")] <- c(-1,5.5,5,-1)
inputs$ctl$age_selex_parms[is.na(inputs$ctl$age_selex_parms)] <- 0


# Create survey fleet ecocadiz ####################
si_ecocadiz <- readxl::read_excel(data_path, "si_ecocadiz", na = c("", "NA"))


inputs$dat$fleetinfo <- rbind(inputs$dat$fleetinfo, data.frame(
    type = 3,
    surveytiming = (2* 12/inputs$dat$nseas)/12,
    area = 1,  # Assume one area
    units = 1,  # NB: Survey fleets ignore this value
    need_catch_mult = 0,
    fleetname = "ecocadiz",
    stringsAsFactors = FALSE))

inputs$dat$len_info["ecocadiz",] <- list(
    mintailcomp = -1,
    addtocomp = 1e-4,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 1)

inputs$dat$age_info["ecocadiz",] <- list(
    mintailcomp = -1,
    addtocomp = 1e-4,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 1)

inputs$dat$CPUEinfo["ecocadiz",] <- list(
    Fleet = which(inputs$dat$fleetinfo$fleetname == "ecocadiz"),
    Units = 1,  # Biomass (metric tons),
    Errtype = 0,
    SD_Report = 0)

inputs$dat$CPUE <- rbind(inputs$dat$CPUE, data.frame(
  year = si_ecocadiz$year,
  seas = si_ecocadiz$step*(12/inputs$dat$nseas),
  fleet = which(inputs$dat$fleetinfo$fleetname == "ecocadiz"),
  catch = si_ecocadiz[["weight"]],
  catch_se = 0.3,
  stringsAsFactors = TRUE))

# https://nmfs-ost.github.io/ss3-doc/SS330_User_Manual_release.html#catchability CPUE scaling
inputs$ctl$Q_options["ecocadiz",] <- list(
    fleet = which(inputs$dat$fleetinfo$fleetname == "ecocadiz"),
    link = 1,
    link_info = 0,
    extra_se = 0,
    biasadj = 0,
    float = 0 )

inputs$ctl$Q_parms[paste0("LnQ_base_", "ecocadiz"),] <- list(
    LO = 0,
    HI = 5.5,
    INIT = 0.1,
    PHASE = 2 )

inputs$ctl$size_selex_types["ecocadiz", "Pattern"] <- 1
inputs$ctl$size_selex_types[is.na(inputs$ctl$size_selex_types)] <- 0

inputs$ctl$size_selex_parms[paste0("SizeSel_P_1_", "ecocadiz"),c("LO","HI","INIT","PHASE")] <- c(-1,10,8,3)
inputs$ctl$size_selex_parms[paste0("SizeSel_P_2_", "ecocadiz"),c("LO","HI","INIT","PHASE")] <- c(-1,20,10,3)
inputs$ctl$size_selex_parms[is.na(inputs$ctl$size_selex_parms)] <- 0

inputs$ctl$age_selex_types["ecocadiz", "Pattern"] <- 12
inputs$ctl$age_selex_types[is.na(inputs$ctl$age_selex_types)] <- 0

inputs$ctl$age_selex_parms[paste0("AgeSel_P_1_", "ecocadiz"),c("LO","HI","INIT","PHASE")] <- c(-2,5.5,0.1,-1)
inputs$ctl$age_selex_parms[paste0("AgeSel_P_2_", "ecocadiz"),c("LO","HI","INIT","PHASE")] <- c(-1,5.5,5,-1)
inputs$ctl$age_selex_parms[is.na(inputs$ctl$age_selex_parms)] <- 0


# Create survey fleet pelago ####################
si_pelago <- readxl::read_excel(data_path, "si_pelago", na = c("", "NA"))


inputs$dat$fleetinfo <- rbind(inputs$dat$fleetinfo, data.frame(
    type = 3,
    surveytiming = (1* 12/inputs$dat$nseas)/12,
    area = 1,  # Assume one area
    units = 1,  # NB: Survey fleets ignore this value
    need_catch_mult = 0,
    fleetname = "pelago",
    stringsAsFactors = FALSE))

inputs$dat$len_info["pelago",] <- list(
    mintailcomp = -1,
    addtocomp = 1e-4,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 1)

inputs$dat$age_info["pelago",] <- list(
    mintailcomp = -1,
    addtocomp = 1e-4,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 1)

inputs$dat$CPUEinfo["pelago",] <- list(
    Fleet = which(inputs$dat$fleetinfo$fleetname == "pelago"),
    Units = 1,  # Biomass (metric tons),
    Errtype = 0,
    SD_Report = 0)

inputs$dat$CPUE <- rbind(inputs$dat$CPUE, data.frame(
  year = si_pelago$year,
  seas = si_pelago$step*(12/inputs$dat$nseas),
  fleet = which(inputs$dat$fleetinfo$fleetname == "pelago"),
  catch = si_pelago[["weight"]],
  catch_se = 0.3,
  stringsAsFactors = TRUE))

# https://nmfs-ost.github.io/ss3-doc/SS330_User_Manual_release.html#catchability CPUE scaling
inputs$ctl$Q_options["pelago",] <- list(
    fleet = which(inputs$dat$fleetinfo$fleetname == "pelago"),
    link = 1,
    link_info = 0,
    extra_se = 0,
    biasadj = 0,
    float = 0 )

inputs$ctl$Q_parms[paste0("LnQ_base_", "pelago"),] <- list(
    LO = 0,
    HI = 5.5,
    INIT = 0.1,
    PHASE = 2 )

inputs$ctl$size_selex_types["pelago", "Pattern"] <- 1
inputs$ctl$size_selex_types[is.na(inputs$ctl$size_selex_types)] <- 0

inputs$ctl$size_selex_parms[paste0("SizeSel_P_1_", "pelago"),c("LO","HI","INIT","PHASE")] <- c(-1,10,8,3)
inputs$ctl$size_selex_parms[paste0("SizeSel_P_2_", "pelago"),c("LO","HI","INIT","PHASE")] <- c(-1,20,10,3)
inputs$ctl$size_selex_parms[is.na(inputs$ctl$size_selex_parms)] <- 0

inputs$ctl$age_selex_types["pelago", "Pattern"] <- 12
inputs$ctl$age_selex_types[is.na(inputs$ctl$age_selex_types)] <- 0

inputs$ctl$age_selex_parms[paste0("AgeSel_P_1_", "pelago"),c("LO","HI","INIT","PHASE")] <- c(-2,5.5,0.1,-1)
inputs$ctl$age_selex_parms[paste0("AgeSel_P_2_", "pelago"),c("LO","HI","INIT","PHASE")] <- c(-1,5.5,5,-1)
inputs$ctl$age_selex_parms[is.na(inputs$ctl$age_selex_parms)] <- 0


# Create survey fleet ECOREC ####################
si_ECOREC <- readxl::read_excel(data_path, "si_ECOREC", na = c("", "NA"))


inputs$dat$fleetinfo <- rbind(inputs$dat$fleetinfo, data.frame(
    type = 3,
    surveytiming = (3* 12/inputs$dat$nseas)/12,
    area = 1,  # Assume one area
    units = 1,  # NB: Survey fleets ignore this value
    need_catch_mult = 0,
    fleetname = "ECOREC",
    stringsAsFactors = FALSE))

inputs$dat$len_info["ECOREC",] <- list(
    mintailcomp = -1,
    addtocomp = 1e-4,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 1)

inputs$dat$age_info["ECOREC",] <- list(
    mintailcomp = -1,
    addtocomp = 1e-4,
    combine_M_F = 0,
    CompressBins = 0,
    CompError = 0,
    ParmSelect = 0,
    minsamplesize = 1)

inputs$dat$CPUEinfo["ECOREC",] <- list(
    Fleet = which(inputs$dat$fleetinfo$fleetname == "ECOREC"),
    Units = 1,  # Biomass (metric tons),
    Errtype = 0,
    SD_Report = 0)

inputs$dat$CPUE <- rbind(inputs$dat$CPUE, data.frame(
  year = si_ECOREC$year,
  seas = si_ECOREC$step*(12/inputs$dat$nseas),
  fleet = which(inputs$dat$fleetinfo$fleetname == "ECOREC"),
  catch = si_ECOREC[["weight"]],
  catch_se = 0.3,
  stringsAsFactors = TRUE))

# https://nmfs-ost.github.io/ss3-doc/SS330_User_Manual_release.html#catchability CPUE scaling
inputs$ctl$Q_options["ECOREC",] <- list(
    fleet = which(inputs$dat$fleetinfo$fleetname == "ECOREC"),
    link = 1,
    link_info = 0,
    extra_se = 0,
    biasadj = 0,
    float = 0 )

inputs$ctl$Q_parms[paste0("LnQ_base_", "ECOREC"),] <- list(
    LO = 0,
    HI = 5.5,
    INIT = 0.1,
    PHASE = 2 )

inputs$ctl$size_selex_types["ECOREC", "Pattern"] <- 1
inputs$ctl$size_selex_types[is.na(inputs$ctl$size_selex_types)] <- 0

inputs$ctl$size_selex_parms[paste0("SizeSel_P_1_", "ECOREC"),c("LO","HI","INIT","PHASE")] <- c(-1,10,8,3)
inputs$ctl$size_selex_parms[paste0("SizeSel_P_2_", "ECOREC"),c("LO","HI","INIT","PHASE")] <- c(-1,20,10,3)
inputs$ctl$size_selex_parms[is.na(inputs$ctl$size_selex_parms)] <- 0

inputs$ctl$age_selex_types["ECOREC", "Pattern"] <- 12
inputs$ctl$age_selex_types[is.na(inputs$ctl$age_selex_types)] <- 0

inputs$ctl$age_selex_parms[paste0("AgeSel_P_1_", "ECOREC"),c("LO","HI","INIT","PHASE")] <- c(-2,5.5,0.1,-1)
inputs$ctl$age_selex_parms[paste0("AgeSel_P_2_", "ECOREC"),c("LO","HI","INIT","PHASE")] <- c(-1,5.5,5,-1)
inputs$ctl$age_selex_parms[is.na(inputs$ctl$age_selex_parms)] <- 0


# Create length distribution for seine ####################

ldist_seine <- readxl::read_excel(data_path, "ldist_seine", na = c("", "NA"))


if (nrow(inputs$dat$lencomp) == 0) {
    # Seed lencomp with columns based on lbin_vector
    cols <- paste0("L", inputs$dat$lbin_vector)
    cols <- structure(as.list(rep(0, length(cols))), names = cols)
    inputs$dat$lencomp <- as.data.frame(c(list(
        Yr = 1999,
        Seas = 1,
        Fleet = 0,
        Gender = 0,
        Part = 0,
        NSamp = 100), cols))[c(),]
}

# Convert lengths into SS-compatible names
ldist_seine$length <- as.factor(ldist_seine$length)
lvls <- parse_levels(levels(ldist_seine$length))
lvls_map <- structure(paste0("L", lvls$lower_bound), names = lvls$names)
levels(ldist_seine$length) <- lvls_map[levels(ldist_seine$length)]

# Rotate length groupings, renaming to SS labels
ldist_seine <- reshape2::dcast(
    ldist_seine,
    year + step + area ~ length,
    value.var = "number")

inputs$dat$lencomp <- dplyr::bind_rows(inputs$dat$lencomp, cbind(data.frame(
    Yr = ldist_seine$year,
    Seas = ldist_seine$step * (12/inputs$dat$nseas),
    Fleet = which(inputs$dat$fleetinfo$fleetname == "seine"),
    Gender = 0,
    Part = 0,
    NSamp = 100,
    stringsAsFactors = TRUE), ldist_seine[,lvls_map]))


# Create length distribution for ecocadiz ####################

ldist_ecocadiz <- readxl::read_excel(data_path, "ldist_ecocadiz", na = c("", "NA"))


if (nrow(inputs$dat$lencomp) == 0) {
    # Seed lencomp with columns based on lbin_vector
    cols <- paste0("L", inputs$dat$lbin_vector)
    cols <- structure(as.list(rep(0, length(cols))), names = cols)
    inputs$dat$lencomp <- as.data.frame(c(list(
        Yr = 1999,
        Seas = 1,
        Fleet = 0,
        Gender = 0,
        Part = 0,
        NSamp = 100), cols))[c(),]
}

# Convert lengths into SS-compatible names
ldist_ecocadiz$length <- as.factor(ldist_ecocadiz$length)
lvls <- parse_levels(levels(ldist_ecocadiz$length))
lvls_map <- structure(paste0("L", lvls$lower_bound), names = lvls$names)
levels(ldist_ecocadiz$length) <- lvls_map[levels(ldist_ecocadiz$length)]

# Rotate length groupings, renaming to SS labels
ldist_ecocadiz <- reshape2::dcast(
    ldist_ecocadiz,
    year + step + area ~ length,
    value.var = "number")

inputs$dat$lencomp <- dplyr::bind_rows(inputs$dat$lencomp, cbind(data.frame(
    Yr = ldist_ecocadiz$year,
    Seas = ldist_ecocadiz$step * (12/inputs$dat$nseas),
    Fleet = which(inputs$dat$fleetinfo$fleetname == "ecocadiz"),
    Gender = 0,
    Part = 0,
    NSamp = 100,
    stringsAsFactors = TRUE), ldist_ecocadiz[,lvls_map]))


# Create length distribution for pelago ####################

ldist_pelago <- readxl::read_excel(data_path, "ldist_pelago", na = c("", "NA"))


if (nrow(inputs$dat$lencomp) == 0) {
    # Seed lencomp with columns based on lbin_vector
    cols <- paste0("L", inputs$dat$lbin_vector)
    cols <- structure(as.list(rep(0, length(cols))), names = cols)
    inputs$dat$lencomp <- as.data.frame(c(list(
        Yr = 1999,
        Seas = 1,
        Fleet = 0,
        Gender = 0,
        Part = 0,
        NSamp = 100), cols))[c(),]
}

# Convert lengths into SS-compatible names
ldist_pelago$length <- as.factor(ldist_pelago$length)
lvls <- parse_levels(levels(ldist_pelago$length))
lvls_map <- structure(paste0("L", lvls$lower_bound), names = lvls$names)
levels(ldist_pelago$length) <- lvls_map[levels(ldist_pelago$length)]

# Rotate length groupings, renaming to SS labels
ldist_pelago <- reshape2::dcast(
    ldist_pelago,
    year + step + area ~ length,
    value.var = "number")

inputs$dat$lencomp <- dplyr::bind_rows(inputs$dat$lencomp, cbind(data.frame(
    Yr = ldist_pelago$year,
    Seas = ldist_pelago$step * (12/inputs$dat$nseas),
    Fleet = which(inputs$dat$fleetinfo$fleetname == "pelago"),
    Gender = 0,
    Part = 0,
    NSamp = 100,
    stringsAsFactors = TRUE), ldist_pelago[,lvls_map]))


# Create length distribution for ECOREC ####################

ldist_ECOREC <- readxl::read_excel(data_path, "ldist_ECOREC", na = c("", "NA"))


if (nrow(inputs$dat$lencomp) == 0) {
    # Seed lencomp with columns based on lbin_vector
    cols <- paste0("L", inputs$dat$lbin_vector)
    cols <- structure(as.list(rep(0, length(cols))), names = cols)
    inputs$dat$lencomp <- as.data.frame(c(list(
        Yr = 1999,
        Seas = 1,
        Fleet = 0,
        Gender = 0,
        Part = 0,
        NSamp = 100), cols))[c(),]
}

# Convert lengths into SS-compatible names
ldist_ECOREC$length <- as.factor(ldist_ECOREC$length)
lvls <- parse_levels(levels(ldist_ECOREC$length))
lvls_map <- structure(paste0("L", lvls$lower_bound), names = lvls$names)
levels(ldist_ECOREC$length) <- lvls_map[levels(ldist_ECOREC$length)]

# Rotate length groupings, renaming to SS labels
ldist_ECOREC <- reshape2::dcast(
    ldist_ECOREC,
    year + step + area ~ length,
    value.var = "number")

inputs$dat$lencomp <- dplyr::bind_rows(inputs$dat$lencomp, cbind(data.frame(
    Yr = ldist_ECOREC$year,
    Seas = ldist_ECOREC$step * (12/inputs$dat$nseas),
    Fleet = which(inputs$dat$fleetinfo$fleetname == "ECOREC"),
    Gender = 0,
    Part = 0,
    NSamp = 100,
    stringsAsFactors = TRUE), ldist_ECOREC[,lvls_map]))


# Create age-length distribution for seine ####################

if (nrow(inputs$dat$agecomp) == 0) {
  # Seed agecomp with columns based on abin_vector
  cols <- paste0("E", inputs$dat$agebin_vector)
  cols <- structure(as.list(rep(0, length(cols))), names = cols)

  inputs$dat$agecomp <- as.data.frame(c(list(
    Yr = 1999,
    Seas = 1,
    Fleet = 1,
    Gender = 0,
    Part = 0,
    Ageerr= 1,
    Lbin_lo=0,
    Lbin_hi=0,
    NSamp = 100), cols))[c(),]
}

aldist_seine <- readxl::read_excel(data_path, "aldist_seine", na = c("", "NA"))


aldist_seine$age <- as.factor(aldist_seine$age)
lvls_a <- parse_levels(levels(aldist_seine$age))
lvls_a_map <- structure(paste0("E", lvls_a$lower_bound), names = lvls_a$names)
levels(aldist_seine$age) <- lvls_a_map[levels(aldist_seine$age)]

inputs$dat$ageerror <- as.data.frame(t(data.frame(
    "1" = inputs$dat$agebin_vector + .5,
    "2" = 0.001,
    row.names = paste0("age", inputs$dat$agebin_vector))))

# *Age composition*
agedist_seine<-aldist_seine |>
  group_by(year,step,age) |> summarise(total=sum(number, na.rm = TRUE))
# Rotate age groupings, renaming to SS labels
agedist_seine <- reshape2::dcast(agedist_seine,
                                year + step  ~ age, value.var = "total")

agecomp_seine<-cbind(data.frame(
  Yr = agedist_seine$year,
  Seas = agedist_seine$step*(12/inputs$dat$nseas),
  Fleet = -which(inputs$dat$fleetinfo$fleetname == "seine"),
  Gender = 0,
  Part = 0,
  Ageerr= 1,
  Lbin_lo=-1,
  Lbin_hi=-1,
  NSamp = rowSums(agedist_seine[,lvls_a_map], na.rm = TRUE),
  stringsAsFactors = TRUE), agedist_seine[,lvls_a_map])
agecomp_seine[,lvls_a_map]<-agecomp_seine[,lvls_a_map]/agecomp_seine$NSamp #replace number by proportion

# *Age at length*
# Rotate age at length groupings, renaming to SS labels
aldist_seine <- reshape2::dcast(aldist_seine,
  year + step + area + length ~ age, value.var = "number")

aldist_seine$length<-as.factor(aldist_seine$length)
lvls_l <- parse_levels(levels(aldist_seine$length))
lvls_l_map <- structure(lvls_l$lower_bound, names = lvls_l$names)
levels(aldist_seine$length) <- lvls_l_map[levels(aldist_seine$length)]

agelencomp_seine<-cbind(data.frame(
  Yr = aldist_seine$year,
  Seas = aldist_seine$step*(12/inputs$dat$nseas),
  Fleet = which(inputs$dat$fleetinfo$fleetname == "seine"),
  Gender = 0,
  Part = 0,
  Ageerr= 1,
  Lbin_lo=as.numeric(aldist_seine$length),
  Lbin_hi=as.numeric(aldist_seine$length),
  NSamp = rowSums(aldist_seine[,lvls_a_map], na.rm = TRUE),
  stringsAsFactors = TRUE), aldist_seine[,lvls_a_map])
agelencomp_seine<-agelencomp_seine[!agelencomp_seine$NSamp==0,] # remove row with  size sample equal to 0.
agelencomp_seine[,lvls_a_map]<-agelencomp_seine[,lvls_a_map]/agelencomp_seine$NSamp #replace number by proportion

inputs$dat$agecomp <- dplyr::bind_rows(inputs$dat$agecomp, agecomp_seine, agelencomp_seine)
inputs$dat$agecomp[is.na(inputs$dat$agecomp)] <- 0
rownames(inputs$dat$agecomp) <- NULL


# Create age-length distribution for ecocadiz ####################

if (nrow(inputs$dat$agecomp) == 0) {
  # Seed agecomp with columns based on abin_vector
  cols <- paste0("E", inputs$dat$agebin_vector)
  cols <- structure(as.list(rep(0, length(cols))), names = cols)

  inputs$dat$agecomp <- as.data.frame(c(list(
    Yr = 1999,
    Seas = 1,
    Fleet = 1,
    Gender = 0,
    Part = 0,
    Ageerr= 1,
    Lbin_lo=0,
    Lbin_hi=0,
    NSamp = 100), cols))[c(),]
}

aldist_ecocadiz <- readxl::read_excel(data_path, "aldist_ecocadiz", na = c("", "NA"))


aldist_ecocadiz$age <- as.factor(aldist_ecocadiz$age)
lvls_a <- parse_levels(levels(aldist_ecocadiz$age))
lvls_a_map <- structure(paste0("E", lvls_a$lower_bound), names = lvls_a$names)
levels(aldist_ecocadiz$age) <- lvls_a_map[levels(aldist_ecocadiz$age)]

inputs$dat$ageerror <- as.data.frame(t(data.frame(
    "1" = inputs$dat$agebin_vector + .5,
    "2" = 0.001,
    row.names = paste0("age", inputs$dat$agebin_vector))))

# *Age composition*
agedist_ecocadiz<-aldist_ecocadiz |>
  group_by(year,step,age) |> summarise(total=sum(number, na.rm = TRUE))
# Rotate age groupings, renaming to SS labels
agedist_ecocadiz <- reshape2::dcast(agedist_ecocadiz,
                                year + step  ~ age, value.var = "total")

agecomp_ecocadiz<-cbind(data.frame(
  Yr = agedist_ecocadiz$year,
  Seas = agedist_ecocadiz$step*(12/inputs$dat$nseas),
  Fleet = -which(inputs$dat$fleetinfo$fleetname == "ecocadiz"),
  Gender = 0,
  Part = 0,
  Ageerr= 1,
  Lbin_lo=-1,
  Lbin_hi=-1,
  NSamp = rowSums(agedist_ecocadiz[,lvls_a_map], na.rm = TRUE),
  stringsAsFactors = TRUE), agedist_ecocadiz[,lvls_a_map])
agecomp_ecocadiz[,lvls_a_map]<-agecomp_ecocadiz[,lvls_a_map]/agecomp_ecocadiz$NSamp #replace number by proportion

# *Age at length*
# Rotate age at length groupings, renaming to SS labels
aldist_ecocadiz <- reshape2::dcast(aldist_ecocadiz,
  year + step + area + length ~ age, value.var = "number")

aldist_ecocadiz$length<-as.factor(aldist_ecocadiz$length)
lvls_l <- parse_levels(levels(aldist_ecocadiz$length))
lvls_l_map <- structure(lvls_l$lower_bound, names = lvls_l$names)
levels(aldist_ecocadiz$length) <- lvls_l_map[levels(aldist_ecocadiz$length)]

agelencomp_ecocadiz<-cbind(data.frame(
  Yr = aldist_ecocadiz$year,
  Seas = aldist_ecocadiz$step*(12/inputs$dat$nseas),
  Fleet = which(inputs$dat$fleetinfo$fleetname == "ecocadiz"),
  Gender = 0,
  Part = 0,
  Ageerr= 1,
  Lbin_lo=as.numeric(aldist_ecocadiz$length),
  Lbin_hi=as.numeric(aldist_ecocadiz$length),
  NSamp = rowSums(aldist_ecocadiz[,lvls_a_map], na.rm = TRUE),
  stringsAsFactors = TRUE), aldist_ecocadiz[,lvls_a_map])
agelencomp_ecocadiz<-agelencomp_ecocadiz[!agelencomp_ecocadiz$NSamp==0,] # remove row with  size sample equal to 0.
agelencomp_ecocadiz[,lvls_a_map]<-agelencomp_ecocadiz[,lvls_a_map]/agelencomp_ecocadiz$NSamp #replace number by proportion

inputs$dat$agecomp <- dplyr::bind_rows(inputs$dat$agecomp, agecomp_ecocadiz, agelencomp_ecocadiz)
inputs$dat$agecomp[is.na(inputs$dat$agecomp)] <- 0
rownames(inputs$dat$agecomp) <- NULL


# Create age-length distribution for pelago ####################

if (nrow(inputs$dat$agecomp) == 0) {
  # Seed agecomp with columns based on abin_vector
  cols <- paste0("E", inputs$dat$agebin_vector)
  cols <- structure(as.list(rep(0, length(cols))), names = cols)

  inputs$dat$agecomp <- as.data.frame(c(list(
    Yr = 1999,
    Seas = 1,
    Fleet = 1,
    Gender = 0,
    Part = 0,
    Ageerr= 1,
    Lbin_lo=0,
    Lbin_hi=0,
    NSamp = 100), cols))[c(),]
}

aldist_pelago <- readxl::read_excel(data_path, "aldist_pelago", na = c("", "NA"))


aldist_pelago$age <- as.factor(aldist_pelago$age)
lvls_a <- parse_levels(levels(aldist_pelago$age))
lvls_a_map <- structure(paste0("E", lvls_a$lower_bound), names = lvls_a$names)
levels(aldist_pelago$age) <- lvls_a_map[levels(aldist_pelago$age)]

inputs$dat$ageerror <- as.data.frame(t(data.frame(
    "1" = inputs$dat$agebin_vector + .5,
    "2" = 0.001,
    row.names = paste0("age", inputs$dat$agebin_vector))))

# *Age composition*
agedist_pelago<-aldist_pelago |>
  group_by(year,step,age) |> summarise(total=sum(number, na.rm = TRUE))
# Rotate age groupings, renaming to SS labels
agedist_pelago <- reshape2::dcast(agedist_pelago,
                                year + step  ~ age, value.var = "total")

agecomp_pelago<-cbind(data.frame(
  Yr = agedist_pelago$year,
  Seas = agedist_pelago$step*(12/inputs$dat$nseas),
  Fleet = -which(inputs$dat$fleetinfo$fleetname == "pelago"),
  Gender = 0,
  Part = 0,
  Ageerr= 1,
  Lbin_lo=-1,
  Lbin_hi=-1,
  NSamp = rowSums(agedist_pelago[,lvls_a_map], na.rm = TRUE),
  stringsAsFactors = TRUE), agedist_pelago[,lvls_a_map])
agecomp_pelago[,lvls_a_map]<-agecomp_pelago[,lvls_a_map]/agecomp_pelago$NSamp #replace number by proportion

# *Age at length*
# Rotate age at length groupings, renaming to SS labels
aldist_pelago <- reshape2::dcast(aldist_pelago,
  year + step + area + length ~ age, value.var = "number")

aldist_pelago$length<-as.factor(aldist_pelago$length)
lvls_l <- parse_levels(levels(aldist_pelago$length))
lvls_l_map <- structure(lvls_l$lower_bound, names = lvls_l$names)
levels(aldist_pelago$length) <- lvls_l_map[levels(aldist_pelago$length)]

agelencomp_pelago<-cbind(data.frame(
  Yr = aldist_pelago$year,
  Seas = aldist_pelago$step*(12/inputs$dat$nseas),
  Fleet = which(inputs$dat$fleetinfo$fleetname == "pelago"),
  Gender = 0,
  Part = 0,
  Ageerr= 1,
  Lbin_lo=as.numeric(aldist_pelago$length),
  Lbin_hi=as.numeric(aldist_pelago$length),
  NSamp = rowSums(aldist_pelago[,lvls_a_map], na.rm = TRUE),
  stringsAsFactors = TRUE), aldist_pelago[,lvls_a_map])
agelencomp_pelago<-agelencomp_pelago[!agelencomp_pelago$NSamp==0,] # remove row with  size sample equal to 0.
agelencomp_pelago[,lvls_a_map]<-agelencomp_pelago[,lvls_a_map]/agelencomp_pelago$NSamp #replace number by proportion

inputs$dat$agecomp <- dplyr::bind_rows(inputs$dat$agecomp, agecomp_pelago, agelencomp_pelago)
inputs$dat$agecomp[is.na(inputs$dat$agecomp)] <- 0
rownames(inputs$dat$agecomp) <- NULL


# Create age-length distribution for ECOREC ####################

if (nrow(inputs$dat$agecomp) == 0) {
  # Seed agecomp with columns based on abin_vector
  cols <- paste0("E", inputs$dat$agebin_vector)
  cols <- structure(as.list(rep(0, length(cols))), names = cols)

  inputs$dat$agecomp <- as.data.frame(c(list(
    Yr = 1999,
    Seas = 1,
    Fleet = 1,
    Gender = 0,
    Part = 0,
    Ageerr= 1,
    Lbin_lo=0,
    Lbin_hi=0,
    NSamp = 100), cols))[c(),]
}

aldist_ECOREC <- readxl::read_excel(data_path, "aldist_ECOREC", na = c("", "NA"))


aldist_ECOREC$age <- as.factor(aldist_ECOREC$age)
lvls_a <- parse_levels(levels(aldist_ECOREC$age))
lvls_a_map <- structure(paste0("E", lvls_a$lower_bound), names = lvls_a$names)
levels(aldist_ECOREC$age) <- lvls_a_map[levels(aldist_ECOREC$age)]

inputs$dat$ageerror <- as.data.frame(t(data.frame(
    "1" = inputs$dat$agebin_vector + .5,
    "2" = 0.001,
    row.names = paste0("age", inputs$dat$agebin_vector))))

# *Age composition*
agedist_ECOREC<-aldist_ECOREC |>
  group_by(year,step,age) |> summarise(total=sum(number, na.rm = TRUE))
# Rotate age groupings, renaming to SS labels
agedist_ECOREC <- reshape2::dcast(agedist_ECOREC,
                                year + step  ~ age, value.var = "total")

agecomp_ECOREC<-cbind(data.frame(
  Yr = agedist_ECOREC$year,
  Seas = agedist_ECOREC$step*(12/inputs$dat$nseas),
  Fleet = -which(inputs$dat$fleetinfo$fleetname == "ECOREC"),
  Gender = 0,
  Part = 0,
  Ageerr= 1,
  Lbin_lo=-1,
  Lbin_hi=-1,
  NSamp = rowSums(agedist_ECOREC[,lvls_a_map], na.rm = TRUE),
  stringsAsFactors = TRUE), agedist_ECOREC[,lvls_a_map])
agecomp_ECOREC[,lvls_a_map]<-agecomp_ECOREC[,lvls_a_map]/agecomp_ECOREC$NSamp #replace number by proportion

# *Age at length*
# Rotate age at length groupings, renaming to SS labels
aldist_ECOREC <- reshape2::dcast(aldist_ECOREC,
  year + step + area + length ~ age, value.var = "number")

aldist_ECOREC$length<-as.factor(aldist_ECOREC$length)
lvls_l <- parse_levels(levels(aldist_ECOREC$length))
lvls_l_map <- structure(lvls_l$lower_bound, names = lvls_l$names)
levels(aldist_ECOREC$length) <- lvls_l_map[levels(aldist_ECOREC$length)]

agelencomp_ECOREC<-cbind(data.frame(
  Yr = aldist_ECOREC$year,
  Seas = aldist_ECOREC$step*(12/inputs$dat$nseas),
  Fleet = which(inputs$dat$fleetinfo$fleetname == "ECOREC"),
  Gender = 0,
  Part = 0,
  Ageerr= 1,
  Lbin_lo=as.numeric(aldist_ECOREC$length),
  Lbin_hi=as.numeric(aldist_ECOREC$length),
  NSamp = rowSums(aldist_ECOREC[,lvls_a_map], na.rm = TRUE),
  stringsAsFactors = TRUE), aldist_ECOREC[,lvls_a_map])
agelencomp_ECOREC<-agelencomp_ECOREC[!agelencomp_ECOREC$NSamp==0,] # remove row with  size sample equal to 0.
agelencomp_ECOREC[,lvls_a_map]<-agelencomp_ECOREC[,lvls_a_map]/agelencomp_ECOREC$NSamp #replace number by proportion

inputs$dat$agecomp <- dplyr::bind_rows(inputs$dat$agecomp, agecomp_ECOREC, agelencomp_ECOREC)
inputs$dat$agecomp[is.na(inputs$dat$agecomp)] <- 0
rownames(inputs$dat$agecomp) <- NULL


# Set params ###############################

inputs$ctl$MG_parms[grepl("VonBert_K", rownames(inputs$ctl$MG_parms)), "INIT"] <- 0.3
inputs$ctl$MG_parms[grepl("VonBert_K", rownames(inputs$ctl$MG_parms)), "LO"] <- 0.04
inputs$ctl$MG_parms[grepl("VonBert_K", rownames(inputs$ctl$MG_parms)), "HI"] <- 1.2

## Fishing Mortality (F) ----

# Setting the Ballpark Year for Fishing Mortality:
#   F_ballpark_year is set to a negative value of the end year (endyr) from the input data.
#   This indicates that the fishing mortality parameter is estimated or initialized relative to
#   the end year of the data.
# Initializing Fishing Mortality:
#   init_F is set to NULL, indicating that the initial fishing mortality values are not
#.  explicitly specified in this script. They might be initialized or estimated through other means in the model.
inputs$ctl$F_ballpark_year<- -inputs$dat$endyr
inputs$ctl$init_F<-NULL



# Finalise model #######################

# Set rownames (so they can be added as comments into data.ss)
rownames(inputs$dat$fleetinfo) <- inputs$dat$fleetinfo$fleetname

# Zero NA values in catch
for (n in names(inputs$dat$lencomp)[-seq_len(6)]) {
    inputs$dat$lencomp[[n]][is.na(inputs$dat$lencomp[[n]])] <- 0
}

# Derived values
inputs$dat$Nfleets <- sum(inputs$dat$fleetinfo$type %in% c(1,3))
inputs$dat$N_lbins <- length(inputs$dat$lbin_vector)
if (nrow(inputs$dat$lencomp) > 0) {
    inputs$dat$use_lencomp <- 1
} else {
    inputs$dat$use_lencomp <- 0
    inputs$dat$lencomp <- NULL  # r4ss wont write 0-row data.frames
}
inputs$dat$N_ageerror_definitions <- floor(nrow(inputs$dat$ageerror) / 2)
inputs$dat$N_agebins <- length(inputs$dat$agebin_vector)
if (nrow(inputs$dat$MeanSize_at_Age_obs) > 0) {
    inputs$dat$use_MeanSize_at_Age_obs <- 1
} else {
    inputs$dat$use_MeanSize_at_Age_obs <- 0
    inputs$dat$MeanSize_at_Age_obs <- NULL  # r4ss wont write 0-row data.frames
}
inputs$dat$Ngenders <- inputs$dat$Nsexes

inputs$ctl$fleetnames <- inputs$dat$fleetinfo$fleetname
inputs$ctl$Nfleets <- length(inputs$ctl$fleetnames)
inputs$ctl$N_lambdas <- nrow(inputs$ctl$lambdas)
if (nrow(inputs$ctl$lambdas) == 0) inputs$ctl$lambdas <- NULL
inputs$ctl$maxlambdaphase<- 1

# *------------------------------------------------------*
#  RUN AND OUTPUTS

# Write back to mod_path ----
# 1. Write Back to mod_path:
#    The SS_write function from the r4ss package is used to write the inputs back to the model path
#    specified by mod_path. If files with the same names already exist in the directory,
#    they will be overwritten (overwrite = TRUE).

r4ss::SS_write(inputs, dir = mod_path, overwrite = TRUE)

# Run model ----
# 2. Run Model:
#   The script changes the directory to the model path using the system function in the terminal.
#   File permissions are set to allow the computer to execute the models executable file (ss3).
#   The model SS3 is executed using the run function from the r4ss package, specifying the model directory,
#   executable file name (ss3), and other options like skipfinished and show_in_console.

ss3_exe <- r4ss::get_ss3_exe()
r4ss::run(dir = mod_path, exe = ss3_exe, skipfinished = FALSE, show_in_console = TRUE)

# Read the model output and print diagnostic messages ----
# 3. Read Model Output and Print Diagnostic Messages:
#    The SS_output function from the r4ss package is used to read the model output from the directory
#    specified by mod_path.
#    Verbose mode is turned on (verbose = TRUE) to print diagnostic messages.
#    Summary statistics are printed (printstats = TRUE) to provide insights into the models performance.

replist <- SS_output(
  dir = mod_path,
  verbose = TRUE,
  printstats = TRUE
)

# plots the results ----
# 4. Plot Results:
#    Finally, the SS_plots function from the r4ss package is used to generate plots based on the
#.   model output (replist).
  SS_plots(replist)


